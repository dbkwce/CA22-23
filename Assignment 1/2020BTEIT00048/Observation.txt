                                   Time Complexity of Quick Sort

Worst case time complexity	O(n^2 )
Best case time complexity	O(n*log n)
Average time complexity	        O(n*log n)
Space complexity	        O(n*log n)

The time taken by quicksort to sort an array depends on the input array and partition strategy or method.

If k is the number of elements less than the pivot and n is the total number of elements, then the general time taken by quicksort can be expressed as follows:

T(n) = T(k) + T(n-k-1) +O (n)

Here, T(k) and T(n-k-1) are the time taken by recursive calls and O(n) is the time taken by partitioning call.



#1) Worst case: 
		Worst case in quicksort technique occurs mostly when we select the lowest or highest element in the array as a pivot. (In the above 			illustration we have selected the highest element as the pivot). In such a situation worst case occurs when the array to be sorted is already 			sorted in ascending or descending order.

Hence the above expression for total time taken changes as:

T(n) = T(0) + T(n-1) + O(n) that resolves to O(n^2)


#2) Best case: 
	The best case for quicksort always occurs when the pivot element selected is the middle of the array.

	Thus the recurrence for the best case is:

T(n) = 2T(n/2) + O(n) = O(nlogn)

#3) Average case: 	
		To analyze the average case for quicksort, we should consider all the array permutations and then calculate the time taken by each of these 			permutations. In a nutshell, the average time for quicksort also becomes O(nlogn).
