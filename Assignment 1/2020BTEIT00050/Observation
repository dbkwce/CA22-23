Analysis of QuickSort



if we can decide the sequence of functions executed from 'gprof' 

NO, As the gprof's Call graph shows how much time was spent in each function and its children and 
as the function displayed in call graph are according to their occurence in code and not as they are executed 
we can't decide the sequence of the functions 


for example :

suppose in main function there are two functions namely quicksort and printarray the functions performing as their name suggests

now in call graph we would see quicksort and then printarray and then the functions that were called by quicksort
 but this is not they are executed as we know quicksort would make calls to swap and partitioning functions and 
then at last printarray would be executed hence gprof fails to give us the order of the function's execution
Time taken by QuickSort in general can be written as following.
T(n) = T(k) + T(n-k-1) + Θ(n)
The first two terms are for two recursive calls, the last term is for the partition process. k is the number
 of elements which are smaller than pivot.
The time taken by QuickSort depends upon the input array and partition strategy. Following are three cases.

Worst Case: The worst case occurs when the partition process always picks greatest or smallest element as pivot. I
f we consider above partition strategy where last element is always picked as pivot, the worst case would occur 
when the array is already sorted in increasing or decreasing order. Following is recurrence for worst case.
 T(n) = T(0) + T(n-1) + Θ(n)
which is equivalent to  
 T(n) = T(n-1) + Θ(n)
The solution of above recurrence is Θ(n2).

Best Case: The best case occurs when the partition process always picks the middle element as pivot. 
Following is recurrence for best case.
 T(n) = 2T(n/2) + Θ(n)
The solution of above recurrence is Θ(nLogn). It can be solved using case 2 of Master Theorem.

Average Case: To do average case analysis, we need to consider all possible permutation of array and 
calculate time taken by every permutation which doesn't look easy.
We can get an idea of average case by considering the case when partition puts O(n/9) elements in 
one set and O(9n/10) elements in other set. Following is recurrence for this case.
 T(n) = T(n/9) + T(9n/10) + Θ(n)
Solution of above recurrence is also O(nLogn)

Although the worst case time complexity of QuickSort is O(n2) which is more than many other 
sorting algorithms like Merge Sort and Heap Sort, QuickSort is faster in practice, because 
its inner loop can be efficiently implemented on most architectures, and in most real-world data. 
QuickSort can be implemented in different ways by changing the choice of pivot, so that the worst 
case rarely occurs for a given type of data. However, merge sort is generally considered better when 
data is huge and stored in external storage.
