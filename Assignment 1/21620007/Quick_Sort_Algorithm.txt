PRN: 21620007

Algorithm for quick sort: 

Step 1 − Choose rightmost element value has pivot
Step 2 − Take two variables to point left and right of the list excluding pivot
Step 3 − left points to the low index
Step 4 − right points to the high
Step 5 − while value at left is less than pivot move right
Step 6 − while value at right is greater than pivot move left
Step 7 − if both step 5 and step 6 does not match swap left and right
Step 8 − if left ≥ right, the point where they met is new pivot


Code: 

//Program for quick sort
#include <stdio.h>
#include <stdlib.h>

// function to swap elements
void swap(int *a,int *b) {
  int t = *a;
  *a = *b;
  *b = t;
}

// function to find the partition position
int partition(int arr[], int low, int high) {
  
  // select the rightmost element as pivot
  int pivot = arr[high];
  
  // pointer for greater element
  int i = (low - 1);

  // compare all elements them with the pivot
  for (int j = low; j < high; j++) {
    if (arr[j] <= pivot) {
        
      // if element smaller than pivot then swap it with the greater element pointed by i
      i++;
      swap(&arr[i], &arr[j]);
    }
  }
  // swap the pivot element with the greater element at i
  swap(&arr[i + 1], &arr[high]);
  
  return (i + 1);
}

void quickSort(int arr[],int low,int high) {
  if (low < high) {
    
    // find the pivot element 
   int pivot = partition(arr, low, high);
    
    // recursive call on the left of pivot
    quickSort(arr, low, pivot - 1);
    
    // recursive call on the right of pivot
    quickSort(arr, pivot + 1, high);
  }
}

// function to print array elements
void printArray(int arr[],int size) {
  for (int i = 0; i < size; ++i) {
    printf("%d  ", arr[i]);
  }
  printf("\n");
}

// main function
int main() {
    
  int n;
  printf("Enter n : ");
  scanf("%d",&n);
  
  int arr[n];
  // for generate random elements of array
  for (int i = 0; i < n; i++) {
      arr[i]=rand()%10000;
  }
  
  printf("Unsorted Array : \n");
  printArray(arr, n);
  
  // quicksort 
  quickSort(arr, 0, n - 1);
  
  printf("Sorted Array : \n");
  printArray(arr, n);
}
