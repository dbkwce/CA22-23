Observation:


- No, The functions are sorted by decreasing run-time spent in them,  function which take more time to execute is shown first in the table.
 all the function entries are not in sequence as they called in code itself.

  Here as we increase the value of n then the time required to execute the program increases.
  This means 
   --n is directly proportional to the time required to execute the program.
   --For lower values of n, the time required to execute the program is less(for example if value of n is 10 then the execution time is nearly 0).
   --For higher values of n, the time required to execute the program is more.




TIME COMLEXITY:

1.Worst Case Complexity [Big-O]: O(n2)
  
 -  It occurs when the pivot element picked is either the greatest or the smallest element. 

 -   This condition leads to the case in which the pivot element lies in an extreme end of the sorted array. One sub-array is always empty and another sub-array contains n - 1 elements. Thus, quicksort is called only on this sub-array.

 -   However, the quicksort algorithm has better performance for scattered pivots.

2.Best Case Complexity [Big-omega]: O(n*log n)

   It occurs when the pivot element is always the middle element or near to the middle element.

3.Average Case Complexity [Big-theta]: O(n*log n)

   It occurs when the above conditions do not occur.