Huffman Compression Program
Huffman tree with merged pathways:
Level 0 : [[324797, ' ,6734518092[]']]
Level 1 : [[131070, ' ,', '1'], [193727, '6734518092[]', '0']]
Level 2 : [[80799, '67345', '1'], [112928, '18092[]', '0']]
Level 3 : [[65535, ' ', '1'], [65535, ',', '0'], [112928, '18092[]', '0']]
Level 4 : [[50520, '1809', '1'], [62408, '2[]', '0'], [65535, ',', '0']]
Level 5 : [[38653, '6734', '1'], [42146, '5', '0'], [62408, '2[]', '0'], [65535, ',', '0']]
Level 6 : [[29382, '2', '1'], [33026, '[]', '0'], [42146, '5', '0'], [65535, ' ', '1']]
Level 7 : [[23643, '1', '1'], [26877, '809', '0'], [33026, '[]', '0'], [42146, '5', '0'], [65535, ',', '0']]
Level 8 : [[18426, '67', '1'], [20227, '34', '0'], [26877, '809', '0'], [33026, '[]', '0'], [65535, ' ', '1']]
Level 9 : [[16513, '[', '1'], [16513, ']', '0'], [20227, '34', '0'], [26877, '809', '0'], [42146, '5', '0'], [65535, ',', '0']]
Level 10 : [[10909, '8', '1'], [15968, '09', '0'], [16513, ']', '0'], [20227, '34', '0'], [29382, '2', '1'], [65535, ' ', '1']]
Level 11 : [[9766, '3', '1'], [10461, '4', '0'], [15968, '09', '0'], [16513, ']', '0'], [23643, '1', '1'], [42146, '5', '0'], [65535, ',', '0']]
Level 12 : [[9100, '6', '1'], [9326, '7', '0'], [10461, '4', '0'], [15968, '09', '0'], [16513, ']', '0'], [29382, '2', '1'], [65535, ' ', '1']]
Level 13 : [[7158, '0', '1'], [8810, '9', '0'], [9326, '7', '0'], [10461, '4', '0'], [16513, '[', '1'], [23643, '1', '1'], [42146, '5', '0'], [65535, ',', '0']]

[['[', '00001'], ['4', '01100'], [',', '10'], [' ', '11'], ['2', '0001'], ['5', '010'], [']', '00000'], ['6', '01111'], ['0', '001001'], ['3', '01101'], ['7', '01110'], ['9', '001000'], ['8', '00101'], ['1', '0011']]
Binary code generated:
[ 00001
4 01100
, 10
  11
2 0001
5 010
] 00000
6 01111
0 001001
3 01101
7 01110
9 001000
8 00101
1 0011
Your message as binary is:
Your original file size was 2273579 bits. The compressed size is: 1109426
This is a saving of  1164153 bits
Compressed file generated as compressed.txt
Decoding.......
[[[ 44  44  44 255]
  [ 60  60  60 255]
  [ 37  37  37 255]
  ...
  [ 37  37  37 255]
  [ 37  37  37 255]
  [ 38  38  38 255]]

 [[ 34  34  34 255]
  [ 36  36  36 255]
  [ 67  67  67 255]
  ...
  [ 43  43  43 255]
  [ 45  45  45 255]
  [ 43  43  43 255]]

 [[ 46  46  46 255]
  [ 58  58  58 255]
  [ 41  41  41 255]
  ...
  [ 61  61  61 255]
  [ 58  58  58 255]
  [ 47  47  47 255]]

 ...

 [[  3   3   3 255]
  [  4   4   4 255]
  [  4   4   4 255]
  ...
  [ 78  78  78 255]
  [ 73  73  73 255]
  [ 75  75  75 255]]

 [[  3   3   3 255]
  [  4   4   4 255]
  [  4   4   4 255]
  ...
  [ 84  84  84 255]
  [ 65  65  65 255]
  [ 74  74  74 255]]

 [[  4   4   4 255]
  [  4   4   4 255]
  [  4   4   4 255]
  ...
  [ 85  85  85 255]
  [ 71  71  71 255]
  [ 74  74  74 255]]]
Observe the shapes and input and output arrays are matching or not
Input image dimensions: (128, 128, 4)
Output image dimensions: (128, 128, 4)
Success